/*
File Name: Memory Game
Programmer: Arsh Ahluwalia
Date: July 2019
 */

import java.util.*;
import javax.swing.ImageIcon;

/**
 *
 * @author arsh
 */
public class MemoryGame extends javax.swing.JFrame
{
    // declaring an ArrayList to hold cards in a list (0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9)
    ArrayList<String> cards = new ArrayList<String>();
    
    // declaring an ArrayList to hold cards in a random order
    ArrayList<String> set = new ArrayList<String>();
    
    // holding the images for the cards
    ImageIcon a = new ImageIcon("cheetah.jpg");
    ImageIcon b = new ImageIcon("tiger.jpg");
    ImageIcon c = new ImageIcon("lion.jpg");
    ImageIcon d = new ImageIcon("dog.jpg");
    ImageIcon e = new ImageIcon("cat.jpg");
    ImageIcon f = new ImageIcon("rhino.jpg");
    ImageIcon g = new ImageIcon("deer.jpg");
    ImageIcon h = new ImageIcon("bee.jpg");
    ImageIcon i = new ImageIcon("whale.jpg");
    ImageIcon j = new ImageIcon("wolf.jpg");
    ImageIcon back = new ImageIcon("cardback.png");
    ImageIcon done = new ImageIcon("done.png");
    
    // declaring global variables to be used throughout the program
    int count, c1, c2, card1, card2;
    
    // declaring and initialzing an array to hold cards in a random lists
    int[] change = new int[20];

    /**
     * Creates new form MemoryGame
     */
    public MemoryGame()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        Card01 = new javax.swing.JButton();
        Card02 = new javax.swing.JButton();
        Card03 = new javax.swing.JButton();
        Card04 = new javax.swing.JButton();
        Card05 = new javax.swing.JButton();
        Card06 = new javax.swing.JButton();
        Card07 = new javax.swing.JButton();
        Card08 = new javax.swing.JButton();
        Card09 = new javax.swing.JButton();
        Card10 = new javax.swing.JButton();
        Card11 = new javax.swing.JButton();
        Card12 = new javax.swing.JButton();
        Card13 = new javax.swing.JButton();
        Card14 = new javax.swing.JButton();
        Card15 = new javax.swing.JButton();
        Card16 = new javax.swing.JButton();
        Card17 = new javax.swing.JButton();
        Card18 = new javax.swing.JButton();
        Card19 = new javax.swing.JButton();
        Card20 = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnGuessAgain = new javax.swing.JButton();
        txtOutput = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();
        btnDone = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matching Game");

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 51, 153));
        lblTitle.setText("Matching Game");

        Card01.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card01ActionPerformed(evt);
            }
        });

        Card02.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card02ActionPerformed(evt);
            }
        });

        Card03.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card03.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card03ActionPerformed(evt);
            }
        });

        Card04.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card04ActionPerformed(evt);
            }
        });

        Card05.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card05.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card05ActionPerformed(evt);
            }
        });

        Card06.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card06.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card06ActionPerformed(evt);
            }
        });

        Card07.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card07.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card07ActionPerformed(evt);
            }
        });

        Card08.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card08.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card08ActionPerformed(evt);
            }
        });

        Card09.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card09.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card09ActionPerformed(evt);
            }
        });

        Card10.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        Card11.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        Card12.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        Card13.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card13ActionPerformed(evt);
            }
        });

        Card14.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card14ActionPerformed(evt);
            }
        });

        Card15.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card15ActionPerformed(evt);
            }
        });

        Card16.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card16ActionPerformed(evt);
            }
        });

        Card17.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card17ActionPerformed(evt);
            }
        });

        Card18.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card18ActionPerformed(evt);
            }
        });

        Card19.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card19ActionPerformed(evt);
            }
        });

        Card20.setIcon(new javax.swing.ImageIcon("/Users/arsh/Desktop/U2A3_MatchingGame/cardback.png")); // NOI18N
        Card20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card20ActionPerformed(evt);
            }
        });

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnGuessAgain.setText("Guess Again");
        btnGuessAgain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuessAgainActionPerformed(evt);
            }
        });

        txtOutput.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        txtOutput.setText(" Click the Play button to start.  Make sure to click Guess Again after each guess.");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnDone.setLabel("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnExit)
                .addGap(105, 105, 105))
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Card11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card01, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(Card06, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Card12, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Card13, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Card14, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Card02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(Card03, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(Card04, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Card07, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(Card08, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(Card09, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Card16, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(Card17, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Card18, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Card19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Card20, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Card05, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card15, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(btnPlay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuessAgain)
                .addGap(19, 19, 19)
                .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(273, 273, 273))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Card01, Card02, Card03, Card04, Card05, Card06, Card07, Card08, Card09, Card10, Card11, Card12, Card13, Card14, Card15, Card16, Card17, Card18, Card19, Card20});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuessAgain)
                        .addComponent(btnPlay))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Card01, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card05, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Card06, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Card11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Card15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Card03, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Card02, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Card04, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Card09, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(Card08, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card07, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Card14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Card12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Card19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(Card18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Card20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExit)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Card01, Card02, Card03, Card04, Card05, Card06, Card07, Card08, Card09, Card10, Card11, Card12, Card13, Card14, Card15, Card16, Card17, Card18, Card19, Card20});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Card17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card17ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(16);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card17.setIcon(a);
        } else if (temp.equals("1")) {
            Card17.setIcon(b);
        } else if (temp.equals("2")) {
            Card17.setIcon(c);
        } else if (temp.equals("3")) {
            Card17.setIcon(d);
        } else if (temp.equals("4")) {
            Card17.setIcon(e);
        } else if (temp.equals("5")) {
            Card17.setIcon(f);
        } else if (temp.equals("6")) {
            Card17.setIcon(g);
        } else if (temp.equals("7")) {
            Card17.setIcon(h);
        } else if (temp.equals("8")) {
            Card17.setIcon(i);
        } else if (temp.equals("9")) {
            Card17.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[16] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[16] = 0;
        }
    }//GEN-LAST:event_Card17ActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        // initializing the change array (to eventually check if a match is made)
        for (int z = 0; z <= 19; z++)
        {
            change[z]= 1; //
        }

        // assigning cards at random
        // declaring a temporary variable to hold values for the for-loops
        String temp;
        for (int x = 0; x <= 9; x++) // 10 pairs of matches
        {
            for (int y = 1; y <= 2; y++) // 2 cards for each match
            {
                temp = Integer.toString(x); // makes the card values into a string
                set.add(temp); // adds the card values onto the list
            }
        }

        // generating a random position for each card
        for (int x = 0; x <= 19; x++)
        {
            double index = Math.floor(Math.random()*(20-x)); // creates a random number as a double
            int index1 = (int)index; // converts the random number into an integer
            cards.add(set.get(index1)); // adds cards into a random order
            set.remove(set.get(index1)); // removes cards from the list
        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnGuessAgainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuessAgainActionPerformed
        // intializing the variable to 0
        count = 0;

        // the if-structure checks to see whether the same card was chosen by the user
        // case for when the cards are a match: cards are swicthed to done
        if (c1 == c2) {
            for (int y = 1; y <= 2; y++) {
                if (change[0] == 0) {
                    Card01.setIcon(done);
                    change[0] = 2;
                } else if (change[1] == 0) {
                    Card02.setIcon(done);
                    change[1] = 2;
                } else if (change[2] == 0) {
                    Card03.setIcon(done);
                    change[2] = 2;
                } else if (change[3] == 0) {
                    Card04.setIcon(done);
                    change[3] = 2;
                } else if (change[4] == 0) {
                    Card05.setIcon(done);
                    change[4] = 2;
                } else if (change[5] == 0) {
                    Card06.setIcon(done);
                    change[5] = 2;
                } else if (change[6] == 0) {
                    Card07.setIcon(done);
                    change[6] = 2;
                } else if (change[7] == 0) {
                    Card08.setIcon(done);
                    change[7] = 2;
                } else if (change[8] == 0) {
                    Card09.setIcon(done);
                    change[8] = 2;
                } else if (change[9] == 0) {
                    Card10.setIcon(done);
                    change[9] = 2;
                } else if (change[10] == 0) {
                    Card11.setIcon(done);
                    change[10] = 2;
                } else if (change[11] == 0) {
                    Card12.setIcon(done);
                    change[11] = 2;
                } else if (change[12] == 0) {
                    Card13.setIcon(done);
                    change[12] = 2;
                } else if (change[13] == 0) {
                    Card14.setIcon(done);
                    change[13] = 2;
                } else if (change[14] == 0) {
                    Card15.setIcon(done);
                    change[14] = 2;
                } else if (change[15] == 0) {
                    Card16.setIcon(done);
                    change[15] = 2;
                } else if (change[16] == 0) {
                    Card17.setIcon(done);
                    change[16] = 2;
                } else if (change[17] == 0) {
                    Card18.setIcon(done);
                    change[17] = 2;
                } else if (change[18] == 0) {
                    Card19.setIcon(done);
                    change[18] = 2;
                } else if (change[19] == 0) {
                    Card20.setIcon(done);
                    change[19] = 2;
                }
            }
        }
        // case for when cards are not a match: cards go back to being flipped over
        else {
            for (int y = 1; y <= 2; y++) {

                if (change[0] == 0) {
                    Card01.setIcon(back);
                    change[0] = 1;
                } else if (change[1] == 0) {
                    Card02.setIcon(back);
                    change[1] = 1;
                } else if (change[2] == 0) {
                    Card03.setIcon(back);
                    change[2] = 1;
                } else if (change[3] == 0) {
                    Card04.setIcon(back);
                    change[3] = 1;
                } else if (change[4] == 0) {
                    Card05.setIcon(back);
                    change[4] = 1;
                } else if (change[5] == 0) {
                    Card06.setIcon(back);
                    change[5] = 1;
                } else if (change[6] == 0) {
                    Card07.setIcon(back);
                    change[6] = 1;
                } else if (change[7] == 0) {
                    Card08.setIcon(back);
                    change[7] = 1;
                } else if (change[8] == 0) {
                    Card09.setIcon(back);
                    change[8] = 1;
                } else if (change[9] == 0) {
                    Card10.setIcon(back);
                    change[9] = 1;
                } else if (change[10] == 0) {
                    Card11.setIcon(back);
                    change[10] = 1;
                } else if (change[11] == 0) {
                    Card12.setIcon(back);
                    change[11] = 1;
                } else if (change[12] == 0) {
                    Card13.setIcon(back);
                    change[12] = 1;
                } else if (change[13] == 0) {
                    Card14.setIcon(back);
                    change[13] = 1;
                } else if (change[14] == 0) {
                    Card15.setIcon(back);
                    change[14] = 1;
                } else if (change[15] == 0) {
                    Card16.setIcon(back);
                    change[15] = 1;
                } else if (change[16] == 0) {
                    Card17.setIcon(back);
                    change[16] = 1;
                } else if (change[17] == 0) {
                    Card18.setIcon(back);
                    change[17] = 1;
                } else if (change[18] == 0) {
                    Card19.setIcon(back);
                    change[18] = 1;
                } else if (change[19] == 0) {
                    Card20.setIcon(back);
                    change[19] = 1;
                }
            }
        }
    }//GEN-LAST:event_btnGuessAgainActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // exiting the application
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void Card16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card16ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(15);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card16.setIcon(a);
        } else if (temp.equals("1")) {
            Card16.setIcon(b);
        } else if (temp.equals("2")) {
            Card16.setIcon(c);
        } else if (temp.equals("3")) {
            Card16.setIcon(d);
        } else if (temp.equals("4")) {
            Card16.setIcon(e);
        } else if (temp.equals("5")) {
            Card16.setIcon(f);
        } else if (temp.equals("6")) {
            Card16.setIcon(g);
        } else if (temp.equals("7")) {
            Card16.setIcon(h);
        } else if (temp.equals("8")) {
            Card16.setIcon(i);
        } else if (temp.equals("9")) {
            Card16.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[15] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[15] = 0;
        }
    }//GEN-LAST:event_Card16ActionPerformed

    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(10);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card11.setIcon(a);
        } else if (temp.equals("1")) {
            Card11.setIcon(b);
        } else if (temp.equals("2")) {
            Card11.setIcon(c);
        } else if (temp.equals("3")) {
            Card11.setIcon(d);
        } else if (temp.equals("4")) {
            Card11.setIcon(e);
        } else if (temp.equals("5")) {
            Card11.setIcon(f);
        } else if (temp.equals("6")) {
            Card11.setIcon(g);
        } else if (temp.equals("7")) {
            Card11.setIcon(h);
        } else if (temp.equals("8")) {
            Card11.setIcon(i);
        } else if (temp.equals("9")) {
            Card11.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[10] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[10] = 0;
        }
    }//GEN-LAST:event_Card11ActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(11);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card12.setIcon(a);
        } else if (temp.equals("1")) {
            Card12.setIcon(b);
        } else if (temp.equals("2")) {
            Card12.setIcon(c);
        } else if (temp.equals("3")) {
            Card12.setIcon(d);
        } else if (temp.equals("4")) {
            Card12.setIcon(e);
        } else if (temp.equals("5")) {
            Card12.setIcon(f);
        } else if (temp.equals("6")) {
            Card12.setIcon(g);
        } else if (temp.equals("7")) {
            Card12.setIcon(h);
        } else if (temp.equals("8")) {
            Card12.setIcon(i);
        } else if (temp.equals("9")) {
            Card12.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[11] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[11] = 0;
        }
    }//GEN-LAST:event_Card12ActionPerformed

    private void Card18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card18ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(17);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card18.setIcon(a);
        } else if (temp.equals("1")) {
            Card18.setIcon(b);
        } else if (temp.equals("2")) {
            Card18.setIcon(c);
        } else if (temp.equals("3")) {
            Card18.setIcon(d);
        } else if (temp.equals("4")) {
            Card18.setIcon(e);
        } else if (temp.equals("5")) {
            Card18.setIcon(f);
        } else if (temp.equals("6")) {
            Card18.setIcon(g);
        } else if (temp.equals("7")) {
            Card18.setIcon(h);
        } else if (temp.equals("8")) {
            Card18.setIcon(i);
        } else if (temp.equals("9")) {
            Card18.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[17] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[17] = 0;
        }
    }//GEN-LAST:event_Card18ActionPerformed

    private void Card13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card13ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(12);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card13.setIcon(a);
        } else if (temp.equals("1")) {
            Card13.setIcon(b);
        } else if (temp.equals("2")) {
            Card13.setIcon(c);
        } else if (temp.equals("3")) {
            Card13.setIcon(d);
        } else if (temp.equals("4")) {
            Card13.setIcon(e);
        } else if (temp.equals("5")) {
            Card13.setIcon(f);
        } else if (temp.equals("6")) {
            Card13.setIcon(g);
        } else if (temp.equals("7")) {
            Card13.setIcon(h);
        } else if (temp.equals("8")) {
            Card13.setIcon(i);
        } else if (temp.equals("9")) {
            Card13.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[12] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[12] = 0;
        }
    }//GEN-LAST:event_Card13ActionPerformed

    private void Card14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card14ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(13);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card14.setIcon(a);
        } else if (temp.equals("1")) {
            Card14.setIcon(b);
        } else if (temp.equals("2")) {
            Card14.setIcon(c);
        } else if (temp.equals("3")) {
            Card14.setIcon(d);
        } else if (temp.equals("4")) {
            Card14.setIcon(e);
        } else if (temp.equals("5")) {
            Card14.setIcon(f);
        } else if (temp.equals("6")) {
            Card14.setIcon(g);
        } else if (temp.equals("7")) {
            Card14.setIcon(h);
        } else if (temp.equals("8")) {
            Card14.setIcon(i);
        } else if (temp.equals("9")) {
            Card14.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[13] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[13] = 0;
        }
    }//GEN-LAST:event_Card14ActionPerformed

    private void Card19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card19ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(18);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card19.setIcon(a);
        } else if (temp.equals("1")) {
            Card19.setIcon(b);
        } else if (temp.equals("2")) {
            Card19.setIcon(c);
        } else if (temp.equals("3")) {
            Card19.setIcon(d);
        } else if (temp.equals("4")) {
            Card19.setIcon(e);
        } else if (temp.equals("5")) {
            Card19.setIcon(f);
        } else if (temp.equals("6")) {
            Card19.setIcon(g);
        } else if (temp.equals("7")) {
            Card19.setIcon(h);
        } else if (temp.equals("8")) {
            Card19.setIcon(i);
        } else if (temp.equals("9")) {
            Card19.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[18] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[18] = 0;
        }
    }//GEN-LAST:event_Card19ActionPerformed

    private void Card20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card20ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(19);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card20.setIcon(a);
        } else if (temp.equals("1")) {
            Card20.setIcon(b);
        } else if (temp.equals("2")) {
            Card20.setIcon(c);
        } else if (temp.equals("3")) {
            Card20.setIcon(d);
        } else if (temp.equals("4")) {
            Card20.setIcon(e);
        } else if (temp.equals("5")) {
            Card20.setIcon(f);
        } else if (temp.equals("6")) {
            Card20.setIcon(g);
        } else if (temp.equals("7")) {
            Card20.setIcon(h);
        } else if (temp.equals("8")) {
            Card20.setIcon(i);
        } else if (temp.equals("9")) {
            Card20.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[19] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[19] = 0;
        }
    }//GEN-LAST:event_Card20ActionPerformed

    private void Card15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card15ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(14);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card15.setIcon(a);
        } else if (temp.equals("1")) {
            Card15.setIcon(b);
        } else if (temp.equals("2")) {
            Card15.setIcon(c);
        } else if (temp.equals("3")) {
            Card15.setIcon(d);
        } else if (temp.equals("4")) {
            Card15.setIcon(e);
        } else if (temp.equals("5")) {
            Card15.setIcon(f);
        } else if (temp.equals("6")) {
            Card15.setIcon(g);
        } else if (temp.equals("7")) {
            Card15.setIcon(h);
        } else if (temp.equals("8")) {
            Card15.setIcon(i);
        } else if (temp.equals("9")) {
            Card15.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[14] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[14] = 0;
        }
    }//GEN-LAST:event_Card15ActionPerformed

    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(9);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card10.setIcon(a);
        } else if (temp.equals("1")) {
            Card10.setIcon(b);
        } else if (temp.equals("2")) {
            Card10.setIcon(c);
        } else if (temp.equals("3")) {
            Card10.setIcon(d);
        } else if (temp.equals("4")) {
            Card10.setIcon(e);
        } else if (temp.equals("5")) {
            Card10.setIcon(f);
        } else if (temp.equals("6")) {
            Card10.setIcon(g);
        } else if (temp.equals("7")) {
            Card10.setIcon(h);
        } else if (temp.equals("8")) {
            Card10.setIcon(i);
        } else if (temp.equals("9")) {
            Card10.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[9] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[9] = 0;
        }
    }//GEN-LAST:event_Card10ActionPerformed

    private void Card05ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card05ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(4);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card05.setIcon(a);
        } else if (temp.equals("1")) {
            Card05.setIcon(b);
        } else if (temp.equals("2")) {
            Card05.setIcon(c);
        } else if (temp.equals("3")) {
            Card05.setIcon(d);
        } else if (temp.equals("4")) {
            Card05.setIcon(e);
        } else if (temp.equals("5")) {
            Card05.setIcon(f);
        } else if (temp.equals("6")) {
            Card05.setIcon(g);
        } else if (temp.equals("7")) {
            Card05.setIcon(h);
        } else if (temp.equals("8")) {
            Card05.setIcon(i);
        } else if (temp.equals("9")) {
            Card05.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[4] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[4] = 0;
        }
    }//GEN-LAST:event_Card05ActionPerformed

    private void Card09ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card09ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(8);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card09.setIcon(a);
        } else if (temp.equals("1")) {
            Card09.setIcon(b);
        } else if (temp.equals("2")) {
            Card09.setIcon(c);
        } else if (temp.equals("3")) {
            Card09.setIcon(d);
        } else if (temp.equals("4")) {
            Card09.setIcon(e);
        } else if (temp.equals("5")) {
            Card09.setIcon(f);
        } else if (temp.equals("6")) {
            Card09.setIcon(g);
        } else if (temp.equals("7")) {
            Card09.setIcon(h);
        } else if (temp.equals("8")) {
            Card09.setIcon(i);
        } else if (temp.equals("9")) {
            Card09.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[8] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[8] = 0;
        }
    }//GEN-LAST:event_Card09ActionPerformed

    private void Card04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card04ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(3);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card04.setIcon(a);
        } else if (temp.equals("1")) {
            Card04.setIcon(b);
        } else if (temp.equals("2")) {
            Card04.setIcon(c);
        } else if (temp.equals("3")) {
            Card04.setIcon(d);
        } else if (temp.equals("4")) {
            Card04.setIcon(e);
        } else if (temp.equals("5")) {
            Card04.setIcon(f);
        } else if (temp.equals("6")) {
            Card04.setIcon(g);
        } else if (temp.equals("7")) {
            Card04.setIcon(h);
        } else if (temp.equals("8")) {
            Card04.setIcon(i);
        } else if (temp.equals("9")) {
            Card04.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[3] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[3] = 0;
        }
    }//GEN-LAST:event_Card04ActionPerformed

    private void Card08ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card08ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(7);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card08.setIcon(a);
        } else if (temp.equals("1")) {
            Card08.setIcon(b);
        } else if (temp.equals("2")) {
            Card08.setIcon(c);
        } else if (temp.equals("3")) {
            Card08.setIcon(d);
        } else if (temp.equals("4")) {
            Card08.setIcon(e);
        } else if (temp.equals("5")) {
            Card08.setIcon(f);
        } else if (temp.equals("6")) {
            Card08.setIcon(g);
        } else if (temp.equals("7")) {
            Card08.setIcon(h);
        } else if (temp.equals("8")) {
            Card08.setIcon(i);
        } else if (temp.equals("9")) {
            Card08.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[7] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[7] = 0;
        }
    }//GEN-LAST:event_Card08ActionPerformed

    private void Card03ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card03ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(2);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card03.setIcon(a);
        } else if (temp.equals("1")) {
            Card03.setIcon(b);
        } else if (temp.equals("2")) {
            Card03.setIcon(c);
        } else if (temp.equals("3")) {
            Card03.setIcon(d);
        } else if (temp.equals("4")) {
            Card03.setIcon(e);
        } else if (temp.equals("5")) {
            Card03.setIcon(f);
        } else if (temp.equals("6")) {
            Card03.setIcon(g);
        } else if (temp.equals("7")) {
            Card03.setIcon(h);
        } else if (temp.equals("8")) {
            Card03.setIcon(i);
        } else if (temp.equals("9")) {
            Card03.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[2] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[2] = 0;
        }
    }//GEN-LAST:event_Card03ActionPerformed

    private void Card07ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card07ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(6);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card07.setIcon(a);
        } else if (temp.equals("1")) {
            Card07.setIcon(b);
        } else if (temp.equals("2")) {
            Card07.setIcon(c);
        } else if (temp.equals("3")) {
            Card07.setIcon(d);
        } else if (temp.equals("4")) {
            Card07.setIcon(e);
        } else if (temp.equals("5")) {
            Card07.setIcon(f);
        } else if (temp.equals("6")) {
            Card07.setIcon(g);
        } else if (temp.equals("7")) {
            Card07.setIcon(h);
        } else if (temp.equals("8")) {
            Card07.setIcon(i);
        } else if (temp.equals("9")) {
            Card07.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[6] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[6] = 0;
        }
    }//GEN-LAST:event_Card07ActionPerformed

    private void Card02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card02ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(1);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card02.setIcon(a);
        } else if (temp.equals("1")) {
            Card02.setIcon(b);
        } else if(temp.equals("2")) {
            Card02.setIcon(c);
        } else if (temp.equals("3")) {
            Card02.setIcon(d);
        } else if (temp.equals("4")) {
            Card02.setIcon(e);
        } else if (temp.equals("5")) {
            Card02.setIcon(f);
        } else if (temp.equals("6")) {
            Card02.setIcon(g);
        } else if (temp.equals("7")) {
            Card02.setIcon(h);
        } else if (temp.equals("8")) {
            Card02.setIcon(i);
        } else if (temp.equals("9")) {
            Card02.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[1] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[1] = 0;
        }
    }//GEN-LAST:event_Card02ActionPerformed

    private void Card06ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card06ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(5);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card06.setIcon(a);
        } else if (temp.equals("1")) {
            Card06.setIcon(b);
        } else if (temp.equals("2")) {
            Card06.setIcon(c);
        } else if (temp.equals("3")) {
            Card06.setIcon(d);
        } else if (temp.equals("4")) {
            Card06.setIcon(e);
        } else if (temp.equals("5")) {
            Card06.setIcon(f);
        } else if (temp.equals("6")) {
            Card06.setIcon(g);
        } else if (temp.equals("7")) {
            Card06.setIcon(h);
        } else if (temp.equals("8")) {
            Card06.setIcon(i);
        } else if (temp.equals("9")) {
            Card06.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[5] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[5] = 0;
        }
    }//GEN-LAST:event_Card06ActionPerformed

    private void Card01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card01ActionPerformed
        // checking to see which image is assigned to the card
        String temp = cards.get(0);

        // the if-structure assigns the appropriate image to the card
        if (temp.equals("0")) {
            Card01.setIcon(a);
        } else if (temp.equals("1")) {
            Card01.setIcon(b);
        } else if (temp.equals("2")) {
            Card01.setIcon(c);
        } else if (temp.equals("3")) {
            Card01.setIcon(d);
        } else if (temp.equals("4")) {
            Card01.setIcon(e);
        } else if (temp.equals("5")) {
            Card01.setIcon(f);
        } else if (temp.equals("6")) {
            Card01.setIcon(g);
        } else if (temp.equals("7")) {
            Card01.setIcon(h);
        } else if (temp.equals("8")) {
            Card01.setIcon(i);
        } else if (temp.equals("9")) {
            Card01.setIcon(j);
        }

        // setting the card to be either the first or second in the pair for a match
        count++;
        if (count == 1) {
            c1 = Integer.parseInt(temp);
            change[0] = 0;
        } else if (count == 2) {
            c2 = Integer.parseInt(temp);
            change[0] = 0;
        }
    }//GEN-LAST:event_Card01ActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        if (change[0] == 2 && change[1] == 2 && change[2] == 2 && change[3] == 2 && change[4] == 2
                && change[5] == 2 && change[6] == 2 && change[7] == 2 && change[8] == 2 && change[9] == 2
                && change[10] == 2 && change[11] == 2 && change[12] == 2 && change[13] == 2 && change[14] == 2
                && change[15] == 2 && change[16] == 2 && change[17] == 2 && change[18] == 2 && change[19] == 2)
        {
            // outputting a congratulations message to the user
            txtOutput.setText("Congratulations.");
        }
    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MemoryGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MemoryGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MemoryGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemoryGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MemoryGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card01;
    private javax.swing.JButton Card02;
    private javax.swing.JButton Card03;
    private javax.swing.JButton Card04;
    private javax.swing.JButton Card05;
    private javax.swing.JButton Card06;
    private javax.swing.JButton Card07;
    private javax.swing.JButton Card08;
    private javax.swing.JButton Card09;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card17;
    private javax.swing.JButton Card18;
    private javax.swing.JButton Card19;
    private javax.swing.JButton Card20;
    private java.awt.Button btnDone;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGuessAgain;
    private javax.swing.JButton btnPlay;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtOutput;
    // End of variables declaration//GEN-END:variables
}
